" Because who needs vi?
set nocompatible

let mapleader = ","

""=========== MY PLUGINS =========== {{{
"" --------- VUNDLE ---------------- {{{
"     Vundle Setup                   {{{
" Vundle Plugins -- https://github.com/gmarik/Vundle.vim
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
" }}}
" ------- Put Vundle Plugins Here --------------------

if exists("g:running_at_work")
  " Skip these, because I already have them in my work vimrc.
else
  " YouCompleteMe -- Auto Completions
  Plugin 'valloric/YouCompleteMe'
  let g:ycm_extra_conf_globlist = ['~/.ycm_extra_conf.py']

  " For code formatting! TODO(nhdaly): Turn this on. Should be cool!
  " Add maktaba and codefmt to the runtimepath.
  " (The latter must be installed before it can be used.)
  Plugin 'google/vim-maktaba'
  Plugin 'google/vim-codefmt'
endif
" Settings for the above plugins, to be shared at home & at work.
let g:ycm_always_populate_location_list = 1

" For 'better c++ vim highlighting'
Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1
hi cppSTLnamespace ctermfg=10

" For 'better c++ vim highlighting'
let g:windowswap_map_keys = 0 "prevent default bindings
"nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
"nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>
Plugin 'wesQ3/vim-windowswap'

" For haskell highlighting
Plugin 'neovimhaskell/haskell-vim'

" For vim + git!
Plugin 'tpope/vim-fugitive'

" Let you restore a vim session with ":Obsess"
Plugin 'tpope/vim-obsession'

" ------- End Vundle Plugins -------------------------

"      Vundle Setup                   {{{
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" }}}
" Put your non-Plugin stuff after this line
"" --------- END VUNDLE ---------------- }}}

"" --------- VimBall --------------- {{{

" CamelCaseMotion: http://www.vim.org/scripts/script.php?script_id=1905
" Use <shift>key instead of ,key.
map W <Plug>CamelCaseMotion_w
map B <Plug>CamelCaseMotion_b
map E <Plug>CamelCaseMotion_e

" Match default behavior and don't include trailing whitespace on cW/iW.
nmap cW cE
" Must define the default mappings first in order to change them.
runtime plugin/camelcasemotion.vim
omap iW iE
xmap iW iE

"" ----- End VimBall --------------- }}}

" ---- Manual Plugins ---- {{{

source ~/.vim/plugin/bclose.vim 

" Let bclose close a buffer even if it's in multiple windows
let bclose_multiple = 1

" }}}

""======= END MY PLUGINS =========== }}}

""======== MY ADDITIONS ================= {{{

"Set options for formatting text (with autoformat command [=])
set formatoptions=tcqn "autowrap, maintain comments, format comments, lists

"if version >= 703
"  set undofile "Create undo file to store undos even after close/reopen
"endif

" F4 will switch between .cc file and .h
" TODO(nhdaly): Add .cpp file support
map <F4> :e %:p:s,.h$,.X123X,:s,.cc$,.h,:s,.X123X$,.cc,<CR>

" Makes %%/ expand to file's parent directory.
cabbr <expr> %% expand("%:p:h")


" Don't use Modelines unless you really need them, and then turn it on
" manually per session. See google search for 'vim modeline vulnerability' or
" http://www.techrepublic.com/blog/it-security/turn-off-modeline-support-in-vim/
set modelines=0

" Remove trailing whitespace from a line
"command RemoveSpace s/\s\+$//

" Allow you to save a file that you accidentally opened
" without sudo privelage
cmap w!! %!sudo tee > /dev/null %


" Set (weird) hotkeys for horizontal scrolling.
" map <A-V> <ScrollWheelLeft>

" Show the status line even with only one file open.
set laststatus=2

" set tab stuff
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent
set copyindent
set smarttab

set shiftround
" set linebreak "Break lines at word boundaries instead of mid-word
"set nolinebreak "Break lines at word boundaries instead of mid-word

set backspace=indent,eol,start "Allow you to backspace over them
set showmatch "Highlight matching parens

" Hides the current buffer when switching rather than closing.
" Note -- this seems to be enabled even without this line...
set hidden "Allow leaving unsaved buffers to switch windows.

"---- Search settings ------ {{{
"Set vim to use Perl-like regexes instead of Vim-style
"nnoremap / /\v
"vnoremap / /\v
" Don't ignore case for caps
set smartcase "unused unless set ignorecase
set ignorecase
set incsearch "jump to match while typing search
set hlsearch
"shortcut to clear search highlighting
nnoremap <leader><space> :noh<cr>
"Tab to match parentheses
nnoremap <S-tab> %
vnoremap <S-tab> %
" }}}

nnoremap <C-Y> :set invpaste paste?<CR>
set pastetoggle=<C-Y>
set showmode

set number "show line numbers. ... duh?
set splitright "VSplit windows to the right of the current window.

"nnoremap ; : "use ; to mean : so no shift is required

" Set a manual backup directory
"set backup
"set backupdir=~/.vim/backup
"set directory=~/.vim/tmp

set tags=./tags "Where to look for the tags

"set to use search for tags instead of default
"noremap <c-]> g<c-]>
"noremap <c-LeftMouse> <LeftMouse>g<c-]>

" Set emacs-style cmdline editing keys.
" start of line
cnoremap <C-A>         <Home>
" delete character under cursor
"cnoremap <C-D>         <Del>
" end of line
cnoremap <C-E>         <End>
" back/forward one character
"cnoremap <C-B>         <Left>
"cnoremap <C-F>         <Right>
" recall newer command-line
cnoremap <C-N>         <Down>
" recall previous (older) command-line
cnoremap <C-P>         <Up>
" back one word
"cnoremap <Esc><C-B>    <S-Left>
" forward one word
"cnoremap <Esc><C-F>    <S-Right>
" <C-k>: delete to end. From http://stackoverflow.com/a/26310522/751061
cnoremap <C-k> <C-\>e getcmdpos() == 1 ?
      \ '' : getcmdline()[:getcmdpos()-2]<CR>



"Fix j and k for wrapped lines:
noremap j gj
noremap k gk

"Fix up/down for wrapped lines:
" noremap  <buffer> <silent> <Up>   gk
" noremap  <buffer> <silent> <Down> gj
noremap  <buffer> <silent> <Home> g<Home>
noremap  <buffer> <silent> <End>  g<End>
" inoremap <buffer> <silent> <Up>   <C-o>gk
" inoremap <buffer> <silent> <Down> <C-o>gj
inoremap <buffer> <silent> <Home> <C-o>g<Home>
inoremap <buffer> <silent> <End>  <C-o>g<End>

" Makes K split lines (the opposite of J).
nmap K i<cr><esc>k$

" Makes s save
nmap s :w <enter>

"" Powerline
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
"
"let g:powerline_config_overrides 

" Turn on folding for vim files with the three-bracket marker.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" <leader>g does a grep search for the word under the cursor in this dir.
:nnoremap <leader>g :execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>

""========= END MY ADDITIONS ============ }}}

""========= Starter Vimrc ============ {{{
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position in bottom right all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
  " fix mouse-drag to work in tmux/screen
  if &term =~ '^screen' || &term =~ 'xterm'
      " tmux knows the extended mouse mode
      if has("mouse_sgr")
        set ttymouse=sgr
      else
        set ttymouse=xterm2
      end
  endif
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " TODO THIS SHOULDN'T NEED TO BE TURNED OFF. I MESSED SOMETHING UP
  " For all text files set 'textwidth' to 78 characters.
  "autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
""========= End Starter Vimrc ========= }}}

" -------- iTerm Colors -------------- {{{
set t_Co=256
hi Statement ctermfg=3
hi cCustomClass ctermfg=7
hi Function ctermfg=7
hi LineNr ctermfg=3
" Cursor Line number
hi CursorLineNr ctermfg=1
set cursorline
highlight CursorLine ctermfg=none gui=none term=none cterm=none
" Selection
hi Visual term=reverse ctermfg=0
" -------- End iTerm Colors ---------- }}}

